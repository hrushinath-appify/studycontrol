import express from 'express';
import { config, validateConfig } from './config/environment';
import { database } from './config/database';
import { setupMiddleware, setupErrorHandling } from './middleware';
import routes from './routes';

// Validate configuration
validateConfig();

const app = express();

// Setup middleware
setupMiddleware(app);

// API routes
app.use(config.API_PREFIX, routes);

// Setup error handling
setupErrorHandling(app);

// Start server
const startServer = async (): Promise<void> => {
  try {
    // Connect to database
    await database.connect();
    
    // Start listening
    const server = app.listen(config.PORT, () => {
      console.log(`
üöÄ StudyControl API Server Started Successfully!

üìç Server Details:
   ‚Ä¢ Environment: ${config.NODE_ENV}
   ‚Ä¢ Port: ${config.PORT}
   ‚Ä¢ API Base URL: http://localhost:${config.PORT}${config.API_PREFIX}
   
üîó Available Endpoints:
   ‚Ä¢ Health Check: http://localhost:${config.PORT}/health
   ‚Ä¢ API Health: http://localhost:${config.PORT}${config.API_PREFIX}/health
   ‚Ä¢ Authentication: http://localhost:${config.PORT}${config.API_PREFIX}/auth
   ‚Ä¢ Quotes: http://localhost:${config.PORT}${config.API_PREFIX}/quotes
   
üìä Database:
   ‚Ä¢ MongoDB: ${database.isHealthy() ? '‚úÖ Connected' : '‚ùå Disconnected'}
   ‚Ä¢ Connection State: ${database.getConnectionState()}
   
üõ°Ô∏è  Security Features:
   ‚Ä¢ CORS: Enabled
   ‚Ä¢ Helmet: Enabled  
   ‚Ä¢ Rate Limiting: Enabled
   ‚Ä¢ JWT Authentication: Enabled
   
üìù Logs:
   ‚Ä¢ Request Logging: ${config.NODE_ENV === 'development' ? 'Development Mode' : 'Production Mode'}
   ‚Ä¢ Log Level: ${config.LOG_LEVEL}
      `);
    });

    // Graceful shutdown handling
    const gracefulShutdown = async (signal: string) => {
      console.log(`\n‚ö†Ô∏è  Received ${signal}. Starting graceful shutdown...`);
      
      server.close(async () => {
        console.log('‚úÖ HTTP server closed');
        
        try {
          await database.disconnect();
          console.log('‚úÖ Database connection closed');
          console.log('üëã Graceful shutdown completed');
          process.exit(0);
        } catch (error) {
          console.error('‚ùå Error during database shutdown:', error);
          process.exit(1);
        }
      });

      // Force close after 30 seconds
      setTimeout(() => {
        console.error('‚ùå Could not close connections in time, forcefully shutting down');
        process.exit(1);
      }, 30000);
    };

    // Handle shutdown signals
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Handle uncaught exceptions
    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error);
      gracefulShutdown('UNCAUGHT_EXCEPTION');
    });

    // Handle unhandled promise rejections
    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
      gracefulShutdown('UNHANDLED_REJECTION');
    });

  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
};

// Start the server
startServer();

export default app;
